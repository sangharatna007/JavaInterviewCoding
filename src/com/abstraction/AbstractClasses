Abstract classes contain abstract methods (you can refer them as ideas) so that they can be implemented in sub classes according to their requirements.
They are also called as incomplete classes as they have some unimplemented abstract methods(ideas).

Rules need to follow while using abstract classes and abstract methods :

Abstract classes and abstract methods are declared using ‘abstract‘ keyword. We can’t create objects to those classes which are declared as abstract.
But, we can create objects to sub classes of abstract class, provided they must implement abstract methods.

abstract class AbstractClass
{
    abstract void abstractMethod();
}

class ConcreteClass extends AbstractClass
{
    void abstractMethod()
    {
        System.out.println(&quot;Abstract Method Implemented&quot;);
    }
}

public class Abstraction
{
    public static void main(String[] args)
    {
        //AbstractClass A = new AbstractClass();  Can't create objects to Abstract class
        ConcreteClass C = new ConcreteClass();
        //ConcreteClass implements abstract method,
        //so we can create object to ConcreteClass
        AbstractClass A1 = C;
        //ConcreteClass object is auto-upcasted to AbsractClass
    }
}


The methods which are not implemented or which don’t have definitions must be declared with ‘abstract’ keyword and the class which contains it must be also declared as abstract.

// It gives compile time error
class AbstractClass
{
    void abstractMethod();  //This method must be declared as abstract or must be defined
    abstract void abstractMethod();  //The Class must be also declared as abstract
}

//      *****   *****     *****   *****
// This is OK
abstract class AbstractClass
{
    abstract void abstractMethod();
}


It is not compulsory that abstract class must have abstract methods.
It may or may not have abstract methods. But the class which has at least one abstract method must be declared as abstract.

abstract class AbstractClass
{
    void methodOne()
    {
        //Concrete Method
    }
    //No Abstract methods but class is abstract
}

You can’t create objects to abstract class even though it does not contain any abstract methods.

abstract class AbstractClass
{
    void methodOne()
    {
        //Concrete Method
    }

    void methodTwo()
    {
        //Concrete Method
    }
}

public class Abstraction
{
    public static void main(String[] args)
    {
        AbstractClass a = new AbstractClass();  //Compile time error
        //You can't create objects to AbstractClass
        //even though it does not contain any abstract methods.
    }
}


Abstract Class can be a combination of concrete and abstract methods.

abstract class AbstractClass
{
    void methodOne()
    {
        //Concrete Method
    }

    void methodTwo()
    {
        //Concrete Method
    }

    abstract void methodThree();  //Abstract Method

    abstract void methodFour();  //Abstract Method
}

Any class extending an abstract class must implement all abstract methods. If it does not implement, it must be declared as abstract.

abstract class AbstractClass
{
    abstract void abstractMethodOne();  //Abstract Method

    abstract void abstractMethodTwo();  //Abstract Method
}

class ConcreteClass extends AbstractClass
{
    void abstractMethodOne()
    {
        //abstractMethodOne() is implemented
    }

    //This class must implement second abstract method also,
    //otherwise, this class has to be declared as abstract

    void abstractMethodTwo()
    {
        //abstractMethodTwo() is also implemented.
        //No need to declare this class as abstract
    }
}

Inside abstract class, we can keep any number of constructors. If you are not keeping any constructors, then compiler will keep default constructor.

abstract class AbstractClass
{
    AbstractClass()
    {
        //First Constructor
    }

    AbstractClass(int i)
    {
        //Second Constructor
    }

    abstract void abstractMethodOne();  //Abstract Method
}

Abstract methods can not be private. Because, abstract methods must be implemented somehow in the sub classes. If you declare them as private, then you can’t use them outside the class.


abstract class AbstractClass
{
    private abstract void abstractMethodOne();
    //Compile time error, abstract method can not be private.
}

Constructors and fields can not be declared as abstract

abstract class AbstractClass
{
    abstract int i;
    //Compile time error, field can not be abstract

    abstract AbstractClass()
    {
        //Compile time error, constructor can not be abstract
    }
}

Abstract methods can not be static.
?


abstract class AbstractClass
{
    static abstract void abstractMethod();
    //Compile time error, abstract methods can not be static
}


