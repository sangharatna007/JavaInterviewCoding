Method Overriding :

When a class extends its super class, all or some members of super class are inherited to sub class.
When a inherited super class method is modified in the sub class, then we call it as method is overrided.
Through method overriding, we can modify super class method according to requirements of sub class.

Method Overriding in java is most useful features of java. Through inheritance we can reuse already existed code and
through method overriding we can modify that reused code according to our requirements.
This can be best explained with example.

class SuperClass
{
    void methodOfSuperClass()
    {
        System.out.println("From Super Class");
    }
}

class SubClass extends SuperClass
{
    void methodOfSuperClass()
    {
        //SuperClass method is overrided
        //We can keep any tasks here according to our requirements.
        System.out.println("From Sub Class");
    }
}

public class MethodOverriding
{
    public static void main(String[] args)
    {
        SuperClass superclass = new SuperClass();
        superclass.methodOfSuperClass();         //Output : From Super Class
        SubClass subclass = new SubClass();
        subclass.methodOfSuperClass();          //Output : From Sub Class
    }
}

Let’s discuss rules to be followed while overriding a method.

1) Name of the overrided method must be same as in the super class. You can’t change name of the method in subclass.
2) Return Type Of Overrided Method :

The return type of the overrided method must be compatible with super class method.
If super class method has primitive data type as its return type, then overrided method must have same return type in sub class also. If super class method has derived or user defined data type as its return type,
then return type of sub class method must be of same type or its sub class. For example,

class SuperClass
{
    void firstMethodOfSuperClass()
    {
        System.out.println("From Super Class");
    }

    double secondMethodOfSuperClass()
    {
        return 0.0;
    }

    Object thirdMethodOfSuperClass()
    {
        return new Object();
    }
}

class SubClass extends SuperClass
{
    int firstMethodOfSuperClass()
    {
        //Compile time error, return type must be void not int
    }

    void secondMethodOfSuperClass()
    {
        //Complie time error, return type must be double not void
    }

    String thirdMethodOfSuperClass()
    {
        //No Compile time error,
        //return type is compatible with super class method, because
        //String is sub class of Object class
        return new String();
    }
}

3) Visibility Of Overrided method :
class SuperClass
{
    protected void methodOfSuperClass()
    {
        System.out.println("From Super Class");
    }
}

class SubClass extends SuperClass
{
    private void methodOfSuperClass()
    {
        //Compile time error, can't reduce visibility of overrided method
        //here, visibility must be protected or public but not private or default
    }
}
=Visibility goes on decreasing from public to protected to default to private members.

Arguments Of Overrided Methods :

class SuperClass
{
    void methodOfSuperClass()
    {
        System.out.println("From Super Class");
    }
}

class SubClass extends SuperClass
{
    //This class will have two methodOfSuperClass() methods.
    //one is from super class which takes no argument
    //and one is below method which takes one argument
    void methodOfSuperClass(int i)
    {
        System.out.println(i);
    }
}

public class MethodOverloading
{
    public static void main(String[] args)
    {
        SuperClass superclass = new SuperClass();
        superclass.methodOfSuperClass();         //Output : From Super Class
        SubClass subclass = new SubClass();
        subclass.methodOfSuperClass();          //Output : From Super Class
        subclass.methodOfSuperClass(10);       // Output : 10
    }
}